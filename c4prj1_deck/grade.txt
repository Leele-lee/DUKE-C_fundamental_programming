Grading at Wed 04 Oct 2023 09:50:31 AM UTC
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
timeout: the monitored command dumped core
Valgrind reported errors:
==375== Memcheck, a memory error detector
==375== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==375== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==375== Command: ./tester act
==375== Parent PID: 374
==375== 
==375== Invalid write of size 8
==375==    at 0x10A65E: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10B147: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10BB29: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==375==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==375== 
==375== 
==375== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==375==  Access not within mapped region at address 0x0
==375==    at 0x10A65E: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10B147: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10BB29: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==375==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==375==  If you believe this happened as a result of a stack
==375==  overflow in your program's main thread (unlikely but
==375==  possible), you can try to increase the size of the
==375==  main thread stack using the --main-stacksize= flag.
==375==  The main thread stack size used in this run was 8388608.
==375== 
==375== HEAP SUMMARY:
==375==     in use at exit: 896 bytes in 57 blocks
==375==   total heap usage: 58 allocs, 1 frees, 912 bytes allocated
==375== 
==375== LEAK SUMMARY:
==375==    definitely lost: 0 bytes in 0 blocks
==375==    indirectly lost: 0 bytes in 0 blocks
==375==      possibly lost: 0 bytes in 0 blocks
==375==    still reachable: 896 bytes in 57 blocks
==375==         suppressed: 0 bytes in 0 blocks
==375== Rerun with --leak-check=full to see details of leaked memory
==375== 
==375== For lists of detected and suppressed errors, rerun with: -s
==375== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing add_empty_card(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==379== Memcheck, a memory error detector
==379== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==379== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==379== Command: ./tester aec
==379== Parent PID: 378
==379== 
==379== Invalid write of size 8
==379==    at 0x10A65E: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Address 0x4a4c668 is 0 bytes after a block of size 24 alloc'd
==379==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10B2EF: my_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BDF2: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379== 
==379== Invalid write of size 8
==379==    at 0x10A65E: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEF4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Address 0x4a4da48 is 0 bytes after a block of size 392 alloc'd
==379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10B1A2: my_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BE4C: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379== 
==379== Invalid read of size 8
==379==    at 0x10A622: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Address 0x4a4f188 is 8 bytes inside a block of size 16 free'd
==379==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10A63F: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Block was alloc'd at
==379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10BD38: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379== 
==379== Invalid free() / delete / delete[] / realloc()
==379==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10A63F: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Address 0x4a4f180 is 0 bytes inside a block of size 16 free'd
==379==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10A63F: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Block was alloc'd at
==379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x10BD38: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379== 
==379== Invalid read of size 8
==379==    at 0x10A648: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==379== 
==379== 
==379== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==379==  Access not within mapped region at address 0x0
==379==    at 0x10A648: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10A6BD: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10BEC4: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==379==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==379==  If you believe this happened as a result of a stack
==379==  overflow in your program's main thread (unlikely but
==379==  possible), you can try to increase the size of the
==379==  main thread stack using the --main-stacksize= flag.
==379==  The main thread stack size used in this run was 8388608.
==379== 
==379== HEAP SUMMARY:
==379==     in use at exit: 10,424 bytes in 568 blocks
==379==   total heap usage: 590 allocs, 22 frees, 11,600 bytes allocated
==379== 
==379== LEAK SUMMARY:
==379==    definitely lost: 1,760 bytes in 8 blocks
==379==    indirectly lost: 1,664 bytes in 108 blocks
==379==      possibly lost: 0 bytes in 0 blocks
==379==    still reachable: 7,000 bytes in 452 blocks
==379==         suppressed: 0 bytes in 0 blocks
==379== Rerun with --leak-check=full to see details of leaked memory
==379== 
==379== For lists of detected and suppressed errors, rerun with: -s
==379== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)
Testing make_deck_exclude(deck_t *)
Valgrind reported errors:
==383== Memcheck, a memory error detector
==383== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==383== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==383== Command: ./tester mde
==383== Parent PID: 382
==383== 
==383== Conditional jump or move depends on uninitialised value(s)
==383==    at 0x483DF5C: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10C195: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==383== 
==383== Invalid write of size 8
==383==    at 0x10A777: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10C195: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==383==  Address 0x4a463a0 is 0 bytes inside a block of size 1 alloc'd
==383==    at 0x483B723: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x483E017: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10C195: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==383== 
--383-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--383-- si_code=1;  Faulting address: 0x948C8F8;  sp: 0x1002cade20

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==383==    at 0x5805160F: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==383==    by 0x58006623: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==383==    by 0x580A6A6A: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==383==    by 0x580F5FD4: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 383)
==383==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10C195: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==383==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000540
valgrind stack range: [0x1002BAE000 0x1002CADFFF] top usage: 9480 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Testing build_remaining_deck(deck_t **, size_t)
Valgrind reported errors:
==387== Memcheck, a memory error detector
==387== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==387== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==387== Command: ./tester brd
==387== Parent PID: 386
==387== 
==387== Conditional jump or move depends on uninitialised value(s)
==387==    at 0x10A4D0: deck_contains (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A826: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Conditional jump or move depends on uninitialised value(s)
==387==    at 0x483DF5C: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A896: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Conditional jump or move depends on uninitialised value(s)
==387==    at 0x483B6D0: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x483E017: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A896: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Use of uninitialised value of size 8
==387==    at 0x10A8BC: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Conditional jump or move depends on uninitialised value(s)
==387==    at 0x10A4D0: deck_contains (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A737: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Invalid read of size 8
==387==    at 0x10A49D: deck_contains (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A737: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387==  Address 0x4a473a0 is 0 bytes inside a block of size 8 free'd
==387==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A909: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387==  Block was alloc'd at
==387==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A7D2: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Conditional jump or move depends on uninitialised value(s)
==387==    at 0x483DF5C: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
==387== Invalid write of size 8
==387==    at 0x10A777: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387==  Address 0x4a474e8 is 6 bytes after a block of size 2 alloc'd
==387==    at 0x483B723: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x483E017: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
==387== 
--387-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--387-- si_code=1;  Faulting address: 0x948EB28;  sp: 0x1002cade20

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==387==    at 0x5805160F: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==387==    by 0x58006623: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==387==    by 0x580A6A6A: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==387==    by 0x580F5FD4: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 387)
==387==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==387==    by 0x10A757: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10A915: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10C442: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==387==    by 0x10CB7B: main (in /graderhome/work/c4prj1_deck/tester)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000640
valgrind stack range: [0x1002BAE000 0x1002CADFFF] top usage: 9480 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Testing get_match_count(deck_t *)
- Test passed

Overall Grade: F
