Grading at Sun 08 Oct 2023 02:26:38 PM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==661== Memcheck, a memory error detector
==661== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==661== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==661== Command: ./tester hands.txt draw.txt
==661== Parent PID: 660
==661== 
==661== Invalid read of size 1
==661==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==661==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==661==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==661==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==661==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==661== 
==661== 
==661== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==661==  Access not within mapped region at address 0x0
==661==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==661==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==661==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==661==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==661==  If you believe this happened as a result of a stack
==661==  overflow in your program's main thread (unlikely but
==661==  possible), you can try to increase the size of the
==661==  main thread stack using the --main-stacksize= flag.
==661==  The main thread stack size used in this run was 8388608.
==661== 
==661== HEAP SUMMARY:
==661==     in use at exit: 750 bytes in 13 blocks
==661==   total heap usage: 20 allocs, 7 frees, 1,430 bytes allocated
==661== 
==661== LEAK SUMMARY:
==661==    definitely lost: 0 bytes in 0 blocks
==661==    indirectly lost: 0 bytes in 0 blocks
==661==      possibly lost: 0 bytes in 0 blocks
==661==    still reachable: 750 bytes in 13 blocks
==661==         suppressed: 0 bytes in 0 blocks
==661== Rerun with --leak-check=full to see details of leaked memory
==661== 
==661== For lists of detected and suppressed errors, rerun with: -s
==661== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==666== Memcheck, a memory error detector
==666== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==666== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==666== Command: ./tester hands.txt draw.txt
==666== Parent PID: 665
==666== 
==666== Invalid read of size 1
==666==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==666==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==666==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==666==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==666==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==666== 
==666== 
==666== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==666==  Access not within mapped region at address 0x0
==666==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==666==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==666==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==666==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==666==  If you believe this happened as a result of a stack
==666==  overflow in your program's main thread (unlikely but
==666==  possible), you can try to increase the size of the
==666==  main thread stack using the --main-stacksize= flag.
==666==  The main thread stack size used in this run was 8388608.
==666== 
==666== HEAP SUMMARY:
==666==     in use at exit: 750 bytes in 13 blocks
==666==   total heap usage: 20 allocs, 7 frees, 1,430 bytes allocated
==666== 
==666== LEAK SUMMARY:
==666==    definitely lost: 0 bytes in 0 blocks
==666==    indirectly lost: 0 bytes in 0 blocks
==666==      possibly lost: 0 bytes in 0 blocks
==666==    still reachable: 750 bytes in 13 blocks
==666==         suppressed: 0 bytes in 0 blocks
==666== Rerun with --leak-check=full to see details of leaked memory
==666== 
==666== For lists of detected and suppressed errors, rerun with: -s
==666== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==672== Memcheck, a memory error detector
==672== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==672== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==672== Command: ./tester h.txt d.txt
==672== Parent PID: 671
==672== 
==672== Invalid read of size 1
==672==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==672==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==672==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==672==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==672==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==672== 
==672== 
==672== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==672==  Access not within mapped region at address 0x0
==672==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==672==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==672==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==672==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==672==  If you believe this happened as a result of a stack
==672==  overflow in your program's main thread (unlikely but
==672==  possible), you can try to increase the size of the
==672==  main thread stack using the --main-stacksize= flag.
==672==  The main thread stack size used in this run was 8388608.
==672== 
==672== HEAP SUMMARY:
==672==     in use at exit: 782 bytes in 16 blocks
==672==   total heap usage: 23 allocs, 7 frees, 1,462 bytes allocated
==672== 
==672== LEAK SUMMARY:
==672==    definitely lost: 0 bytes in 0 blocks
==672==    indirectly lost: 0 bytes in 0 blocks
==672==      possibly lost: 0 bytes in 0 blocks
==672==    still reachable: 782 bytes in 16 blocks
==672==         suppressed: 0 bytes in 0 blocks
==672== Rerun with --leak-check=full to see details of leaked memory
==672== 
==672== For lists of detected and suppressed errors, rerun with: -s
==672== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==678== Memcheck, a memory error detector
==678== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==678== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==678== Command: ./tester i1 i2
==678== Parent PID: 677
==678== 
==678== Invalid read of size 1
==678==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==678==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==678==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==678==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==678==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==678== 
==678== 
==678== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==678==  Access not within mapped region at address 0x0
==678==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==678==    by 0x1094B9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==678==    by 0x1095D7: read_input (in /graderhome/work/c4prj2_input/tester)
==678==    by 0x10A5DD: main (in /graderhome/work/c4prj2_input/tester)
==678==  If you believe this happened as a result of a stack
==678==  overflow in your program's main thread (unlikely but
==678==  possible), you can try to increase the size of the
==678==  main thread stack using the --main-stacksize= flag.
==678==  The main thread stack size used in this run was 8388608.
==678== 
==678== HEAP SUMMARY:
==678==     in use at exit: 878 bytes in 22 blocks
==678==   total heap usage: 32 allocs, 10 frees, 1,654 bytes allocated
==678== 
==678== LEAK SUMMARY:
==678==    definitely lost: 0 bytes in 0 blocks
==678==    indirectly lost: 0 bytes in 0 blocks
==678==      possibly lost: 0 bytes in 0 blocks
==678==    still reachable: 878 bytes in 22 blocks
==678==         suppressed: 0 bytes in 0 blocks
==678== Rerun with --leak-check=full to see details of leaked memory
==678== 
==678== For lists of detected and suppressed errors, rerun with: -s
==678== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
