#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kv.h"
#include <assert.h>

//return the left part of delim
char *partitionBy(char *line, char *delim) {
  char *ptr = strstr(line, delim);
  if (ptr == NULL) {
    return NULL;
  }
  *ptr = '\0'; // line is change to from begin to delim
  ptr += strlen(delim);
  char *right = strtok(ptr, "\n"); //begin from delim + 1 to the end exclusive to \n
  //malloc right to use in other function
  char *res = malloc((strlen(ptr) + 1) * sizeof(*res));
  strcpy(res, right);
  return res;
}

//you will want to open the file, read the lines of text, split them into
//key/value pairs, add the resulting pairs to an array (hint: realloc it to make it larger
//each time), close the file, and return the kvarray_t * that has your array.
kvarray_t * readKVs(const char * fname) {
  //WRITE ME
  FILE * f = fopen(fname, "r");
  if (f == NULL) {
    return NULL; //Could not open file->indicate failure
  }
  kvarray_t * kvArray = malloc(sizeof(*kvArray));
  kvArray->kvpair = NULL;
  kvArray->numKvpairs = 0;
  size_t sz = 0;
  char * line = NULL;
  size_t i = 0;
  char * value = NULL;
  while (getline(&line, &sz, f) >= 0) {
    value = partitionBy(line, "=");
    assert(value != NULL);
    
    kvpair_t *currPair = malloc(sizeof(*currPair)); //an array of kvpair_t
    currPair->key = malloc((strlen(line) + 1) * sizeof(*currPair->key));
    currPair->value = malloc((strlen(value) + 1) * sizeof(*currPair->value));
    strcpy(currPair->key, line);
    strcpy(currPair->value, value);

    kvArray->kvpair = realloc(kvArray->kvpair, (i + 1) * sizeof(*kvArray->kvpair));
    kvArray->kvpair[i] = currPair; //*currPair is kvpair_t
    i++;
    kvArray->numKvpairs = i;

    line = NULL;
    //free(key);
    free(value);
    free(currPair);
  }
  free(line);

  if (fclose(f) != 0) {
    fprintf(stderr, "Could not close the file");
    return NULL;
  }
  return kvArray;
}


void freeKVs(kvarray_t * pairs) {
  //WRITE ME
  for (int i = 0; i < pairs->numKvpairs; i++) {
    free(pairs->kvpair[i]->key);
    free(pairs->kvpair[i]->value);
    free(pairs->kvpair[i]);
  }
  free(pairs->kvpair);
  free(pairs);
}

void printKVs(kvarray_t * pairs) {
  //WRITE ME
  for (int i = 0; i < pairs->numKvpairs; i++) {
    printf("key = '%s' value = '%s'\n", pairs->kvpair[i]->key, pairs->kvpair[i]->value);
  }
}

//This function searches the kvarray_t 
//for a matching key, and if found, returns the corresponding value.  If no match is found,
//this function returns NULL.
char * lookupValue(kvarray_t * pairs, const char * key) {
  //WRITE ME
  for (int i = 0; i < pairs->numKvpairs; i++) {
    if (strcmp(pairs->kvpair[i]->key, key)) {
      return pairs->kvpair[i]->value;
    }
  }
  return NULL;
}
